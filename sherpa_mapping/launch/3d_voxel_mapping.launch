<?xml version="1.0"?>
<!--
  3D Voxel Mapping Konfiguration für den Sherpa-Roboter
  Kombiniert LaserScan-zu-PointCloud2-Konvertierung mit Octomap für 3D-Kartierung
-->
<launch>
  <!-- Allgemeine Parameter -->
  <arg name="scan_topic" default="/scan" doc="Topic des LaserScan-Inputs"/>
  <arg name="base_frame" default="base_link" doc="Basis-Frame des Roboters"/>
  <arg name="map_frame" default="map" doc="Der globale Karten-Frame"/>
  <arg name="use_rviz" default="true" doc="RViz mit spezieller 3D-Mapping-Konfiguration starten"/>
  
  <!-- 3D Voxel Mapper Parameter -->
  <arg name="voxel_size" default="0.1" doc="Auflösung der Voxel in Metern"/>
  <arg name="max_range" default="10.0" doc="Maximale Reichweite für Punkte in Metern"/>
  <arg name="min_height" default="-0.5" doc="Minimale Höhe für 3D-Punkte in Metern"/>
  <arg name="max_height" default="2.0" doc="Maximale Höhe für 3D-Punkte in Metern"/>
  <arg name="height_levels" default="10" doc="Anzahl der Höhenebenen für die Erstellung vertikaler Punkte"/>
  <arg name="update_rate" default="5.0" doc="Aktualisierungsrate der Voxelkarte in Hz"/>

  <!-- 2D SLAM mit gmapping starten für die Lokalisierungsbasis -->
  <include file="$(find sherpa_mapping)/launch/mapping.launch">
    <arg name="scan_topic" value="$(arg scan_topic)"/>
    <arg name="base_frame" value="$(arg base_frame)"/>
    <arg name="map_frame" value="$(arg map_frame)"/>
    <arg name="use_rviz" value="false"/> <!-- Wir starten unser eigenes Rviz mit 3D-Ansicht -->
  </include>

  <!-- 3D Voxel Mapper starten -->
  <node pkg="sherpa_mapping" type="voxel_3d_mapper.py" name="voxel_3d_mapper" output="screen">
    <param name="scan_topic" value="$(arg scan_topic)"/>
    <param name="base_frame" value="$(arg base_frame)"/>
    <param name="map_frame" value="$(arg map_frame)"/>
    <param name="voxel_size" value="$(arg voxel_size)"/>
    <param name="max_range" value="$(arg max_range)"/>
    <param name="min_height" value="$(arg min_height)"/>
    <param name="max_height" value="$(arg max_height)"/>
    <param name="height_levels" value="$(arg height_levels)"/>
    <param name="update_rate" value="$(arg update_rate)"/>
  </node>

  <!-- Octomap-Server starten für die 3D-Kartierung -->
  <node pkg="octomap_server" type="octomap_server_node" name="octomap_server" output="screen">
    <!-- Grundlegende Octomap-Parameter -->
    <param name="resolution" value="$(arg voxel_size)" />
    <param name="frame_id" value="$(arg map_frame)" />
    
    <!-- Sensor-Modell-Parameter -->
    <param name="sensor_model/max_range" value="$(arg max_range)" />
    <param name="sensor_model/hit" value="0.7" />
    <param name="sensor_model/miss" value="0.4" />
    <param name="sensor_model/min" value="0.12" />
    <param name="sensor_model/max" value="0.97" />
    
    <!-- Octomap-Visualisierung -->
    <param name="color/r" value="0.0" />
    <param name="color/g" value="0.6" />
    <param name="color/b" value="0.8" />
    <param name="color/a" value="1.0" />
    
    <!-- Wichtig: Konfiguriere den Input-Topic auf /cloud_in, den unser 3D Voxel Mapper verwendet -->
    <remap from="cloud_in" to="/cloud_in" />
  </node>

  <!-- Speicher-Parameter für die Octomap -->
  <param name="octomap_binary" value="$(find sherpa_mapping)/maps/sherpa_3d_map.bt" />
  
  <!-- Starte RViz mit 3D-Konfiguration, wenn gewünscht -->
  <group if="$(arg use_rviz)">
    <node pkg="rviz" type="rviz" name="rviz" 
          args="-d $(find sherpa_mapping)/rviz/3d_mapping.rviz" />
  </group>
  
  <!-- Optional: Tastatur-Teleop für den Roboter -->
  <node pkg="sherpa_teleop" type="teleop_keyboard.py" name="teleop_keyboard" output="screen">
    <param name="scale_linear" value="0.5" />
    <param name="scale_angular" value="1.5" />
  </node>
</launch>